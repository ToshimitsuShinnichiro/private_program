//==============================================================================
//
// FineName [ number.cpp ]
// Author : Shinichiro Toshimitsu
//
//==============================================================================

//------------------------------------------------------------------------------
// インクルード
//------------------------------------------------------------------------------
#include "number.h"

//------------------------------------------------------------------------------
//	マクロ定義
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// グローバル変数
//------------------------------------------------------------------------------

//==============================================================================
//	関数名	CNumber
//	引数	None
//	戻り値	None
//==============================================================================
CNumber::CNumber()
{
	Init();
}

//==============================================================================
//	関数名	~CNumber
//	引数	None
//	戻り値	None
//==============================================================================
CNumber::~CNumber()
{
}

//==============================================================================
//	関数名	Init
//	引数	None
//	戻り値	None
//==============================================================================
void CNumber::Init( void )
{
	// 番号の数分ループ
	for( int i = 0; i < MAX_NUMBER; i++ )
	{
		m_NumTex[i][0] = D3DXVECTOR2( i * 0.1f, 1.0f );
		m_NumTex[i][1] = D3DXVECTOR2( i * 0.1f, 0.0f );
		m_NumTex[i][2] = D3DXVECTOR2( ( i * 0.1f ) + 0.1f, 1.0f );
		m_NumTex[i][3] = D3DXVECTOR2( ( i * 0.1f ) + 0.1f, 0.0f );
	}
}

//==============================================================================
//	関数名	Uninit
//	引数	None
//	戻り値	None
//==============================================================================
void CNumber::Uninit( void )
{
}

//==============================================================================
//	関数名	GetInstance
//	引数	None
//	戻り値	CNumber*
//==============================================================================
CNumber *CNumber::GetInstance( void )
{
	static CNumber number;

	return &number;
}

/* ----- EOF ----- */