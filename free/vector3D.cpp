//==============================================================================
//
// FineName [ scene.cpp ]
// Author : Shinichiro Toshimitsu
//
//==============================================================================

//------------------------------------------------------------------------------
// インクルード
//------------------------------------------------------------------------------
#include "vector3D.h"

//------------------------------------------------------------------------------
//	マクロ定義
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// グローバル変数
//------------------------------------------------------------------------------


//==============================================================================
//	関数名	VECTOR3D
//	引数	float, float, float
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D::VECTOR3D( float fx, float fy, float fz )
{
	x = fx;
	y = fy;
	z = fz;
}

//==============================================================================
//	関数名	operator *
//	引数	float
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D VECTOR3D::operator * ( float f ) const
{
	return VECTOR3D( x * f, y * f, z * f );
}

//==============================================================================
//	関数名	operator /
//	引数	float
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D VECTOR3D::operator / ( float f ) const
{
	float fInv = 1.0f / f;														// 逆数を取る

	return VECTOR3D( x * fInv, y * fInv, z * fInv );
}

//==============================================================================
//	関数名	operator +
//	引数	const VECTOR3D&
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D VECTOR3D::operator + ( const VECTOR3D &v ) const
{
	return VECTOR3D( x + v.x, y + v.y, z + v.z );
}

//==============================================================================
//	関数名	operator -
//	引数	const VECTOR3D&
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D VECTOR3D::operator - ( const VECTOR3D &v ) const
{
	return VECTOR3D( x - v.x, y - v.y, z - v.z );
}

//==============================================================================
//	関数名	operator +
//	引数	None
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D VECTOR3D::operator + () const
{
	return *this;
}

//==============================================================================
//	関数名	operator -
//	引数	None
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D VECTOR3D::operator - () const
{
	return VECTOR3D( -x, -y, -z );
}

//==============================================================================
//	関数名	operator *=
//	引数	float
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D& VECTOR3D::operator *= ( float f )
{
	x = x * f;
	y = y * f;
	z = z * f;

	return *this;
}

//==============================================================================
//	関数名	operator /=
//	引数	float
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D& VECTOR3D::operator /= ( float f )
{
	float fInv = 1.0f / f;														// 逆数生成

	x = x * fInv;
	y = y * fInv;
	z = z * fInv;

	return *this;
}

//==============================================================================
//	関数名	operator +=
//	引数	const VECTOR3D&
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D& VECTOR3D::operator += ( const VECTOR3D &v )
{
	x = x + v.x;
	y = y + v.y;
	z = z + v.z;

	return *this;
}

//==============================================================================
//	関数名	operator -=
//	引数	const VECTOR3D&
//	戻り値	VECTOR3D
//==============================================================================
VECTOR3D& VECTOR3D::operator -= ( const VECTOR3D &v )
{
	x = x - v.x;
	y = y - v.y;
	z = z - v.z;

	return *this;
}

/* ----- EOF ----- */